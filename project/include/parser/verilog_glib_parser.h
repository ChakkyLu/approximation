// ./include/parser/verilog_glib_parser.h generated by reflex 1.0.9 from ./src/parser/verilog_glib_parser.l

#ifndef vgl_REFLEX_HEADER_H
#define vgl_REFLEX_HEADER_H
#define vgl_IN_HEADER 1

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define vgl_REFLEX_OPTION_fast                true
#define vgl_REFLEX_OPTION_header_file         ./include/parser/verilog_glib_parser.h
#define vgl_REFLEX_OPTION_lex                 vgl_lex
#define vgl_REFLEX_OPTION_lexer               VGL_LEXER
#define vgl_REFLEX_OPTION_namespace           verilogglibparser
#define vgl_REFLEX_OPTION_outfile             ./src/parser/verilog_glib_parser.cpp
#define vgl_REFLEX_OPTION_prefix              vgl_

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 12 "./src/parser/verilog_glib_parser.l"

#include "circuit.h"
using namespace nodecircuit;
#include <string>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace verilogglibparser {

class VGL_LEXER : public reflex::AbstractLexer<reflex::Matcher> {
#line 18 "./src/parser/verilog_glib_parser.l"

Node* current_node;
Node* temp_node;
int min_range;
int max_range;
int mode;
std::string name;
std::string dff_d;
std::string dff_q;
std::string dff_qn;
virtual int wrap() { return 1; }
public:
Circuit* circuit;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  VGL_LEXER(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
#line 33 "./src/parser/verilog_glib_parser.l"

circuit = NULL;
current_node = NULL;
min_range = max_range = 0;
mode = 255;
// 128:start 129:output 130:input 131:wire
// 140:gateinput 145:assign
// 150:dffreset 151:dffqn 152:dffq 153:dffd 154:dffclock
// 254:nothing 255:finish others:gate

  }
  static const int INITIAL = 0;
  virtual int vgl_lex();
  int vgl_lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return vgl_lex();
  }
};

} // namespace verilogglibparser

#endif
